"use strict";!function(l){l.fn.StickySidebar=function(i){var t,o;function e(i,t){return!0===i.initialized||!(l("body").width()<i.minWidth)&&(t=t,(p=i).initialized=!0,l("head").append(l('<style>.StickySidebar:after {content: ""; display: table; clear: both;}</style>')),t.each(function(){var i={};i.sidebar=l(this),i.options=p||{},i.container=l(i.options.containerSelector),0==i.container.length&&(i.container=i.sidebar.parent()),i.sidebar.parents().css("-webkit-transform","none"),i.sidebar.css({position:"relative",overflow:"visible","-webkit-box-sizing":"border-box","-moz-box-sizing":"border-box","box-sizing":"border-box"}),i.stickySidebar=i.sidebar.find(".StickySidebar"),0==i.stickySidebar.length&&(i.sidebar.find("script").remove(),i.stickySidebar=l("<div>").addClass("StickySidebar").append(i.sidebar.children()),i.sidebar.append(i.stickySidebar)),i.marginTop=parseInt(i.sidebar.css("margin-top")),i.marginBottom=parseInt(i.sidebar.css("margin-bottom")),i.paddingTop=parseInt(i.sidebar.css("padding-top")),i.paddingBottom=parseInt(i.sidebar.css("padding-bottom"));var t,o,e=i.stickySidebar.offset().top,a=i.stickySidebar.outerHeight();function b(){i.fixedScrollTop=0,i.sidebar.css({"min-height":"1px"}),i.stickySidebar.css({position:"static",width:""})}i.stickySidebar.css("padding-top",1),i.stickySidebar.css("padding-bottom",1),e-=i.stickySidebar.offset().top,a=i.stickySidebar.outerHeight()-a-e,0==e?(i.stickySidebar.css("padding-top",0),i.stickySidebarPaddingTop=0):i.stickySidebarPaddingTop=1,0==a?(i.stickySidebar.css("padding-bottom",0),i.stickySidebarPaddingBottom=0):i.stickySidebarPaddingBottom=1,i.previousScrollTop=null,i.fixedScrollTop=0,b(),i.onScroll=function(i){if(i.stickySidebar.is(":visible"))if(l("body").width()<i.options.minWidth)b();else{if(i.options.disableOnResponsiveLayouts)if(i.sidebar.outerWidth("none"==i.sidebar.css("float"))+50>i.container.width())return void b();var t,o,e,a,d,s,n,r=l(document).scrollTop(),c="static";r>=i.container.offset().top+(0-i.options.additionalMarginTop)&&(o=i.paddingTop+i.marginTop+p.additionalMarginTop,d=i.paddingBottom+i.marginBottom+p.additionalMarginBottom,e=i.container.offset().top,a=i.container.offset().top+(n=i.container,s=n.height(),n.children().each(function(){s=Math.max(s,l(this).height())}),s),t=0+p.additionalMarginTop,n=i.stickySidebar.outerHeight()+o+d<l(window).height()?t+i.stickySidebar.outerHeight():l(window).height()-i.marginBottom-i.paddingBottom-p.additionalMarginBottom,o=e-r+i.paddingTop+i.marginTop,d=a-r,e=i.stickySidebar.offset().top-r,a=i.previousScrollTop-r,"fixed"==i.stickySidebar.css("position")&&"modern"==i.options.sidebarBehavior&&(e+=a),"stick-to-top"==i.options.sidebarBehavior&&(e=p.additionalMarginTop),"stick-to-bottom"==i.options.sidebarBehavior&&(e=n-i.stickySidebar.outerHeight()),e=0<a?Math.min(e,t):Math.max(e,n-i.stickySidebar.outerHeight()),e=Math.max(e,o),e=Math.min(e,d-i.stickySidebar.outerHeight()),c=((d=i.container.height()==i.stickySidebar.outerHeight())||e!=t)&&(d||e!=n-i.stickySidebar.outerHeight())?r+e-i.sidebar.offset().top-i.paddingTop<=p.additionalMarginTop?"static":"absolute":"fixed"),"fixed"==c?i.stickySidebar.css({position:"fixed",width:i.sidebar.width(),top:e,left:i.sidebar.offset().left+parseInt(i.sidebar.css("padding-left"))}):"absolute"==c?(n={},"absolute"!=i.stickySidebar.css("position")&&(n.position="absolute",n.top=r+e-i.sidebar.offset().top-i.stickySidebarPaddingTop-i.stickySidebarPaddingBottom),n.width=i.sidebar.width(),n.left="",i.stickySidebar.css(n)):"static"==c&&b(),"static"!=c&&1==i.options.updateSidebarHeight&&i.sidebar.css({"min-height":i.stickySidebar.outerHeight()+i.stickySidebar.offset().top-i.sidebar.offset().top+i.paddingBottom+2}),i.previousScrollTop=r}},i.onScroll(i),l(document).scroll((t=i,function(){t.onScroll(t)})),l(window).resize((o=i,function(){o.stickySidebar.css({position:"static"}),o.onScroll(o)}))}),!0);var p}(i=l.extend({containerSelector:"",additionalMarginTop:0,additionalMarginBottom:0,updateSidebarHeight:!0,minWidth:0,disableOnResponsiveLayouts:!0,sidebarBehavior:"modern"},i)).additionalMarginTop=parseInt(i.additionalMarginTop)||0,i.additionalMarginBottom=parseInt(i.additionalMarginBottom)||0,e(t=i,o=this)||(console.log("TST: Body width smaller than options.minWidth. Init is delayed."),l(document).scroll(function(t,o){return function(i){e(t,o)&&l(this).unbind(i)}}(t,o)),l(window).resize(function(t,o){return function(i){e(t,o)&&l(this).unbind(i)}}(t,o)))}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,